==3297962== Memcheck, a memory error detector
==3297962== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3297962== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3297962== Command: ./ircserv 1234 pass
==3297962== Parent PID: 3297429
==3297962== 
==3297962== Invalid read of size 8
==3297962==    at 0x410DF9: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:411)
==3297962==    by 0x412EBD: ft_irc::Message::parsePayload() (message.cpp:109)
==3297962==    by 0x4128B7: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==3297962==    by 0x405E22: ft_irc::Server::run() (server.cpp:256)
==3297962==    by 0x403B85: main (main.cpp:28)
==3297962==  Address 0x4de9c98 is 0 bytes after a block of size 8 alloc'd
==3297962==    at 0x4849013: operator new(unsigned long) (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3297962==    by 0x40961F: std::__new_allocator<ft_irc::Client*>::allocate(unsigned long, void const*) (new_allocator.h:137)
==3297962==    by 0x4095B0: __gnu_cxx::__alloc_traits<std::allocator<ft_irc::Client*>, ft_irc::Client*>::allocate(std::allocator<ft_irc::Client*>&, unsigned long) (alloc_traits.h:133)
==3297962==    by 0x40937F: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_M_allocate(unsigned long) (stl_vector.h:378)
==3297962==    by 0x412510: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_M_create_storage(unsigned long) (stl_vector.h:395)
==3297962==    by 0x412424: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_Vector_base(unsigned long, std::allocator<ft_irc::Client*> const&) (stl_vector.h:332)
==3297962==    by 0x411A65: std::vector<ft_irc::Client*, std::allocator<ft_irc::Client*> >::vector(std::vector<ft_irc::Client*, std::allocator<ft_irc::Client*> > const&) (stl_vector.h:597)
==3297962==    by 0x410D4C: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:408)
==3297962==    by 0x412EBD: ft_irc::Message::parsePayload() (message.cpp:109)
==3297962==    by 0x4128B7: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==3297962==    by 0x405E22: ft_irc::Server::run() (server.cpp:256)
==3297962==    by 0x403B85: main (main.cpp:28)
==3297962== 
==3297962== Invalid read of size 8
==3297962==    at 0x49C2B18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==3297962==    by 0x4180C6: ft_irc::Client::getNickname[abi:cxx11]() const (client.cpp:81)
==3297962==    by 0x410E07: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:411)
==3297962==    by 0x412EBD: ft_irc::Message::parsePayload() (message.cpp:109)
==3297962==    by 0x4128B7: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==3297962==    by 0x405E22: ft_irc::Server::run() (server.cpp:256)
==3297962==    by 0x403B85: main (main.cpp:28)
==3297962==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==3297962== 
==3297962== 
==3297962== Process terminating with default action of signal 11 (SIGSEGV)
==3297962==  Access not within mapped region at address 0x18
==3297962==    at 0x49C2B18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==3297962==    by 0x4180C6: ft_irc::Client::getNickname[abi:cxx11]() const (client.cpp:81)
==3297962==    by 0x410E07: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:411)
==3297962==    by 0x412EBD: ft_irc::Message::parsePayload() (message.cpp:109)
==3297962==    by 0x4128B7: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==3297962==    by 0x405E22: ft_irc::Server::run() (server.cpp:256)
==3297962==    by 0x403B85: main (main.cpp:28)
==3297962==  If you believe this happened as a result of a stack
==3297962==  overflow in your program's main thread (unlikely but
==3297962==  possible), you can try to increase the size of the
==3297962==  main thread stack using the --main-stacksize= flag.
==3297962==  The main thread stack size used in this run was 8388608.
==3297962== 
==3297962== HEAP SUMMARY:
==3297962==     in use at exit: 75,575 bytes in 25 blocks
==3297962==   total heap usage: 128 allocs, 103 frees, 88,264 bytes allocated
==3297962== 
==3297962== LEAK SUMMARY:
==3297962==    definitely lost: 0 bytes in 0 blocks
==3297962==    indirectly lost: 0 bytes in 0 blocks
==3297962==      possibly lost: 0 bytes in 0 blocks
==3297962==    still reachable: 75,575 bytes in 25 blocks
==3297962==         suppressed: 0 bytes in 0 blocks
==3297962== Rerun with --leak-check=full to see details of leaked memory
==3297962== 
==3297962== For lists of detected and suppressed errors, rerun with: -s
==3297962== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
