==14253== Memcheck, a memory error detector
==14253== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==14253== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==14253== Command: ./ircserv 1234 pass
==14253== Parent PID: 2528
==14253== 
==14253== Invalid read of size 8
==14253==    at 0x11770D: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:424)
==14253==    by 0x11963E: ft_irc::Message::parsePayload() (message.cpp:109)
==14253==    by 0x11916B: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==14253==    by 0x10DBCE: ft_irc::Server::run() (server.cpp:256)
==14253==    by 0x10BBEB: main (main.cpp:28)
==14253==  Address 0x4db9cd8 is 0 bytes after a block of size 8 alloc'd
==14253==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==14253==    by 0x1118F5: __gnu_cxx::new_allocator<ft_irc::Client*>::allocate(unsigned long, void const*) (new_allocator.h:114)
==14253==    by 0x111523: __gnu_cxx::__alloc_traits<std::allocator<ft_irc::Client*>, ft_irc::Client*>::allocate(std::allocator<ft_irc::Client*>&, unsigned long) (alloc_traits.h:133)
==14253==    by 0x110F05: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_M_allocate(unsigned long) (stl_vector.h:343)
==14253==    by 0x118A02: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_M_create_storage(unsigned long) (stl_vector.h:358)
==14253==    by 0x118608: std::_Vector_base<ft_irc::Client*, std::allocator<ft_irc::Client*> >::_Vector_base(unsigned long, std::allocator<ft_irc::Client*> const&) (stl_vector.h:302)
==14253==    by 0x1183D9: std::vector<ft_irc::Client*, std::allocator<ft_irc::Client*> >::vector(std::vector<ft_irc::Client*, std::allocator<ft_irc::Client*> > const&) (stl_vector.h:552)
==14253==    by 0x11768F: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:420)
==14253==    by 0x11963E: ft_irc::Message::parsePayload() (message.cpp:109)
==14253==    by 0x11916B: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==14253==    by 0x10DBCE: ft_irc::Server::run() (server.cpp:256)
==14253==    by 0x10BBEB: main (main.cpp:28)
==14253== 
==14253== Invalid read of size 8
==14253==    at 0x49A4C08: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==14253==    by 0x11E1B6: ft_irc::Client::getNickname[abi:cxx11]() const (client.cpp:81)
==14253==    by 0x11771E: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:424)
==14253==    by 0x11963E: ft_irc::Message::parsePayload() (message.cpp:109)
==14253==    by 0x11916B: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==14253==    by 0x10DBCE: ft_irc::Server::run() (server.cpp:256)
==14253==    by 0x10BBEB: main (main.cpp:28)
==14253==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==14253== 
==14253== 
==14253== Process terminating with default action of signal 11 (SIGSEGV)
==14253==  Access not within mapped region at address 0x18
==14253==    at 0x49A4C08: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28)
==14253==    by 0x11E1B6: ft_irc::Client::getNickname[abi:cxx11]() const (client.cpp:81)
==14253==    by 0x11771E: ft_irc::Server::part(ft_irc::Message*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (command.cpp:424)
==14253==    by 0x11963E: ft_irc::Message::parsePayload() (message.cpp:109)
==14253==    by 0x11916B: ft_irc::Message::Message(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ft_irc::Client*, ft_irc::Server*) (message.cpp:19)
==14253==    by 0x10DBCE: ft_irc::Server::run() (server.cpp:256)
==14253==    by 0x10BBEB: main (main.cpp:28)
==14253==  If you believe this happened as a result of a stack
==14253==  overflow in your program's main thread (unlikely but
==14253==  possible), you can try to increase the size of the
==14253==  main thread stack using the --main-stacksize= flag.
==14253==  The main thread stack size used in this run was 8388608.
==14253== 
==14253== HEAP SUMMARY:
==14253==     in use at exit: 1,890 bytes in 26 blocks
==14253==   total heap usage: 130 allocs, 104 frees, 88,248 bytes allocated
==14253== 
==14253== LEAK SUMMARY:
==14253==    definitely lost: 0 bytes in 0 blocks
==14253==    indirectly lost: 0 bytes in 0 blocks
==14253==      possibly lost: 0 bytes in 0 blocks
==14253==    still reachable: 1,890 bytes in 26 blocks
==14253==         suppressed: 0 bytes in 0 blocks
==14253== Reachable blocks (those to which a pointer was found) are not shown.
==14253== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==14253== 
==14253== For lists of detected and suppressed errors, rerun with: -s
==14253== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
